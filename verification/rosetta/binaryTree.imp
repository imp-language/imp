struct Empty {}
struct Leaf {
	data int
}
type TreeNode = Tree | Empty
struct Tree {
    data int
    left TreeNode
    right TreeNode
}

func makeTree(value int) Tree {
    val left = Empty()
    val right = Empty()
    val tree = Tree(value, left, right)
    return tree
}

func insert(root Tree, value int) {
    if value < root.data {
        match root.left {
            Empty e -> root.left = makeTree(value)
            Tree left ->  insert(left, value)
        }
    } else {
        match root.right {
            Empty e -> root.right = makeTree(value)
            Tree right -> insert(right, value)
        }
    }
}

func inorder(node Tree | Empty) {
    match node {
        Empty e -> {}
        Tree t -> {
            inorder(t.left)
            log(t.data)
            inorder(t.right)
        }
    }
}

func printLevelOrder(node Tree | Empty) {
    val h = height(node)
    for i in range(1, h + 1) {
        log("\nlevel " + i)
        printCurrentLevel(node, i)
    }
}

func printCurrentLevel(node TreeNode, level int) {
        match node {
            Empty e -> {}
            Tree t -> {
                if level == 1 {
                    write(t.data)
                } else {
                    printCurrentLevel(t.left, level - 1)
                    printCurrentLevel(t.right, level - 1)
                }
            }
        }
}

func height(node TreeNode) int {
    match node {
        Empty e -> {
            return 0
        }
        Tree tree -> {
            val lHeight = height(tree.left)
            val rHeight = height(tree.right)
            if lHeight > rHeight {
                return lHeight + 1
            } else {
                return rHeight + 1
            }
        }
    }
    return 0 // Todo(URGENT): NEED RETURN ERRORS AND EXPRESSION RETURNS
}


val t = makeTree(0)
insert(t, -2)
insert(t, -3)
insert(t, -1)
insert(t, 1)
log(t)

//log(t.left.left) // Todo(Current): need to cast during the property access chain in codegen
//t.left.left = makeTree(4)
//t.right.right = makeTree(5)
//log(height(tree))

//printLevelOrder(t)