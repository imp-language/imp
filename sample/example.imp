// Example code as of 6/30/22

// Variables

log("Hello, World!")
val b = 4
mut c = 49
c = c + b
// b = b + 4 // mutability error
log(c)

// If/else
if b > 0 and true {
    log(b>0 and true)
} else {
    log(false)
}


// Loops and lists (subject to change)

log("for loop sum of range")
mut sum = 0
for i in range(0, 10) {
    sum = sum + i
}
log(sum)

log("for loop access through range")
val l = [0,1,3,2,4,5,6,7,8,9,10]
for i in range(0,11) {
    val v = at(l,i)
    log(v)
}

// Union types (tagged unions)

func testUnion(param int | float[] | int[]) {
    match param  {
        int i -> {
            log(i)
            log("int")
        }
        int[] ii -> {
            log(ii)
            log("int[]")
        }
        // Comment this case out for a MatchCoverage error
        float[] f -> {
            log(f)
            log("float[]")
        }
    }
}

val myInt = 4 + 4

testUnion(myInt)
testUnion([4,3,2,1])
testUnion([4.0])

// testUnion(4.0) // expect error



// Binary Tree Example

struct Empty {}
struct Leaf {
	data int
}
type TreeNode = Tree | Empty
struct Tree {
    data int
    left TreeNode
    right TreeNode
}

func makeTree(value int) Tree {
    val left = Empty()
    val right = Empty()
    val tree = Tree(value, left, right)
    return tree
}

func insert(root Tree, value int) {
    if value < root.data {
        match root.left {
            Empty e -> root.left = makeTree(value)
            Tree left ->  insert(left, value)
        }
    } else {
        match root.right {
            Empty e -> root.right = makeTree(value)
            Tree right -> insert(right, value)
        }
    }
}

func height(node TreeNode) int {
    match node {
        Empty e -> {
            return 0
        }
        Tree tree -> {
            val lHeight = height(tree.left)
            val rHeight = height(tree.right)
            if lHeight > rHeight {
                return lHeight + 1
            } else {
                return rHeight + 1
            }
        }
    }
    return 0
}

val t = makeTree(0)
insert(t, -2)
insert(t, -3)
insert(t, -1)
insert(t, 1)
log(t)
log(height(t))



// Generics example

struct Generic[T] {
    key string
    t T
}

struct Name {
    first string
    last string
}


val name = Name("matt", "hall")
log(name)

val genericName = Generic("s", name)
val n = genericName.t
log(n)
log(n.first)


