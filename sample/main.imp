// Generics example
/*
struct Generic[T] {
    key string
    t T
}

struct Name {
    first string
    last string
}


val name = Name("matt", "hall")
//log(name)

val genericName = Generic("s", name)
val n = genericName.t
//log(n)
//log(n.first)


struct Pair[A,B] {
    val0 A
    val1 B
}

struct Data {}
// Todo(CURRENT): need to unbox when generic is a primitive
val pair = Pair("a", Pair("a",4))
log(pair.val0)
log(pair.val1)
val second = pair.val1
log(second.val1)

*/




struct Generic[T] {
    key string
    t T
}

struct Name {
    first string
    last string
}
struct Data {
    content string
}

//val genericInteger = Generic("s", 4)
//val i = genericInteger.t
//log(i+4)

val name = Name("matt", "hall")
//log(name)

val genericName = Generic("s", name)
val n = genericName.t
log(n)
log(n.first)


val genericData = Generic("d", Data("a"))
val data = genericData.t
log(data)
log(data.content)


func takesParam(i int[]) {

}

takes()